NOTES - Steps taken during project completion

(1) Set up DBs, write migrations, run seed files
0 - create dev, prod elephant DBs and update .env file with connection strings / URLs
1 - update knexfile.js to read and use DEVELOPMENT_DATABASE_URL & PRODUCTION_DATABASE_URL from .env
2 - create migration files
    npx knex migrate:make createMoviesTable
    npx knex migrate:make createCriticsTable
    npx knex migrate:make createReviewsTable
    npx knex migrate:make createTheatersTable
    npx knex migrate:make createMoviesTheatersTable
3 - run migration by starting server: "npm run start:dev" (running the startup script finally executed the migration correctly - attempting "npx knex migrate:latest" from the CLI kept causing problems)
4 - connect to DB(s) on DBeaver and confirm all tables are created but empty (seed script hasn't yet been run)
5 - seed the db (yes, while dev server is already running): "npm run seed"
6 - check the tables contain data on DBeaver
Troubleshooting tip: deleted and re-created new DEV databases when setup failed (kept getting "too many connections" errors)

(2) Set up cors middleware, add 500 Server Error, 404 Not Found
0 - n/a self explanatory

(3) First route: GET /movies 
0 - connect app.js -> movies.router.js -> movies.controller.js
1 - extract query param inside movies.controller.js (request.query.is_showing) before passing it to movies service

(4) GET /theaters route
0 - connect app.js -> theaters.router.js -> theaters.controller.js

(5) GET /movies/:movieId
4 use cases: valid ID, invalid ID (not found handling), /reviews, /theaters
(a) return valid/existing movie 
    0 - connect movies.router.js -> movies.controller.js for route("/:movieId)
    1 - movies service: complete read() method to read a single movie by ID from the db
(b) handle invalid / not found movie
    0 - within movies.controller.js "movieExists()" function, if "if(movie)" clause isn't satisfied, complete the "next()" function